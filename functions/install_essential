#!/bin/bash

function install_essential {
    LIST=$(dirname "$0")'/data/essential.list'

    # Update package list first
    update_repository_info

    # Check essential packages
    for PACKAGE in $(cat $LIST); do
        if [ $PACKAGE == 'git' ]; then
            echo_message info "Adding ppa for git"
            superuser_do "add-apt-repository -y ppa:git-core/ppa"
        fi
        install_apt_package "$PACKAGE"
    done
    echo_message success "All packages are installed. :)"
}

function install_dev_tools {
    DEV_TOOL_LIST=$(dirname "$0")'/data/dev_tool.list'

    while IFS='=' read -r FUNCTION BOOLEAN
    do
        if [ $BOOLEAN == true ]; then
            echo_message info "Start $FUNCTION..."
            $FUNCTION
        fi

    done < $DEV_TOOL_LIST
}


function install_docker {
    echo_message info "Setting up docker requirement"

    # Install packages to allow apt to use a repository over HTTPS:
    superuser_do "apt-get install \
        apt-transport-https \
        ca-certificates \
        software-properties-common"

    # Add Dockerâ€™s official GPG key
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | superuser_do "apt-key add -"

    # Verify fingerprint of key is same as 0EBF CD88, need to write somethnig to check
    superuser_do "apt-key fingerprint 0EBFCD88"

    update_repository_info
    superuser_do "apt install docker-ce"
}

function install_nvm {
    # Read node version from personal config file
    read_personal_config

    NODE_LTS="v8.11.3"
    NODE_SPECIFIC_VERSION=$NODE_VERSION

    echo_message info "Downloading nvm script..."
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
    source "$HOME/.nvm/nvm.sh"
    source "$HOME/.profile"
    source "$HOME/.bashrc"

    nvm --version
    echo_message success "NVM installed successfully!"

    nvm install $NODE_LTS
    echo_message success "Node.js $NODE_LTS installed successfully!"

    nvm install $NODE_SPECIFIC_VERSION
    echo_message success "Node.js $NODE_SPECIFIC_VERSION installed successfully!"

}

function install_vscode {
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
    superuser_do "mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg"

    # sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

    superuser_do "apt install apt-transport-https"
    update_repository_info
    superuser_do "apt install code -y"
}

function install_php_package {
    echo_message info "Installing php..."

    superuser_do "add-apt-repository -y ppa:ondrej/php"
    update_repository_info
    export DEBIAN_FRONTEND=noninteractive
    superuser_do "apt install -yq php php-curl"

    echo_message success "Install php successfully!"

    echo_message info "Installing composer..."

    curl -s http://getcomposer.org/installer | php
    superuser_do "mv composer.phar /usr/local/bin/composer"
    superuser_do "echo \"export PATH=${PATH}:/usr/local/bin/ >> $HOME/.bashrc\""
    source "$HOME/.bashrc"

    composer global require hirak/prestissimo

    echo_message success "Install Composer and hirak/prestissimo successfully!"
}
